##########################################################################################
# Change default parameters below before kickstarting analysis using "snakemake"
INPUT_DIRECTORY = "input/"
EXPERIMENT_NAME = "MAPS_rnaseq"
SNAKE_DIRECTORY = workflow.basedir
GENOME = "NC_009004.fasta"
GFF = "NC_009004_with_sRNA.gff"
workdir: "2024_MAPS/"

####################################################################################################
# SAMPLES

# Get samples from input directory
import os
SAMPLES = os.listdir(INPUT_DIRECTORY)
print(SAMPLES)
print(SNAKE_DIRECTORY)

rule all:
    input:
        expand("output/{sample}/NotDedup/assembled_{sample}.gtf", sample=SAMPLES),
        expand("output/{sample}/{sample}.bam", sample=SAMPLES),
        expand("output/{sample}/00_{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("output/{sample}/01_{sample}_val_2_fastqc.html", sample=SAMPLES),
        expand("output/{sample}/{sample}_minus.bedgraph", sample=SAMPLES),
        expand("output/{sample}/{sample}_plius.bedgraph", sample=SAMPLES),
        "output/mapped_counts.tsv"
        
rule merge_copy_fastq:
    input:
        INPUT_DIRECTORY = expand('{INPUT_DIRECTORY}', INPUT_DIRECTORY = INPUT_DIRECTORY),
    output:
        R1 = "output/{sample}/00_{sample}_R1.fq.gz",
        R2 = "output/{sample}/00_{sample}_R2.fq.gz"
    threads: 2       
    shell:
        """
        cat {input.INPUT_DIRECTORY}/{wildcards.sample}/*_1.fq.gz > {output.R1}
        cat {input.INPUT_DIRECTORY}/{wildcards.sample}/*_2.fq.gz > {output.R2}
        """

rule clean_data:
    input:
        R1 = "output/{sample}/00_{sample}_R1.fq.gz",
        R2 = "output/{sample}/00_{sample}_R2.fq.gz"
    output:
        R1 = "output/{sample}/01_{sample}_val_1.fq.gz",
        R2 = "output/{sample}/01_{sample}_val_2.fq.gz"
    threads: 6
    shell:
        """ 
        trim_galore --basename 01_{wildcards.sample} -o output/{wildcards.sample}/ --paired --length 20 -j {threads} {input.R1} {input.R2}
        """ 

rule map_data_hisat2:
    input:
        R1 = "output/{sample}/01_{sample}_val_1.fq.gz",
        R2 = "output/{sample}/01_{sample}_val_2.fq.gz"
    output:
        BAM = "output/{sample}/{sample}.bam",
        BAI = "output/{sample}/{sample}.bam.bai"
    log: "logs/{sample}/hisat2.log"        
    threads: 10
    shell:
        """
        hisat2 -p {threads} -k 10 --no-unal --no-spliced-alignment -X 500 --no-mixed --no-discordant --new-summary --summary-file {log} -x {GENOME} -1 {input.R1} -2 {input.R2} -S output/{wildcards.sample}/hisat2.sam
        samtools sort -@ {threads} output/{wildcards.sample}/hisat2.sam -o {output.BAM}
        rm output/{wildcards.sample}/hisat2.sam
        samtools index {output.BAM}
        """        

rule get_expression:
    input:
        BAM = "output/{sample}/{sample}.bam"
    output: 
        GTF = "output/{sample}/NotDedup/assembled_{sample}.gtf"
    log: "logs/{sample}/stringtie.log"
    threads: 6
    shell:
        """
        mkdir -p output/{wildcards.sample}/NotDedup/
        stringtie {input.BAM} -G {GFF} -eB -p {threads} -o {output.GTF} 
        """

rule make_deep_bins_notDedup:
    input:
        BAM = expand("output/{sample}/{sample}.bam", sample=SAMPLES)
    output:
        npz = "output/mapped.npz",
        counts = "output/mapped_counts.tsv"
    threads: 30
    shell:
        """ 
        multiBamSummary bins --bamfiles {input.BAM} --outFileName {output.npz} --binSize 1000 --numberOfProcessors {threads} --outRawCounts {output.counts}
        """

rule do_fastqc:
    input:
        R1 = "output/{sample}/00_{sample}_R1.fq.gz",
        R2 = "output/{sample}/00_{sample}_R2.fq.gz",
        R3 = "output/{sample}/01_{sample}_val_1.fq.gz",
        R4 = "output/{sample}/01_{sample}_val_2.fq.gz"
    output:
        OUT1 = "output/{sample}/00_{sample}_R1_fastqc.html",
        OUT2 = "output/{sample}/01_{sample}_val_2_fastqc.html"
    threads: 4    
    shell:
        """
        fastqc -t {threads} --nogroup  {input.R1} {input.R2} {input.R3} {input.R4}
        """

rule make_bedgraph:
    input:
        BAM = "output/{sample}/{sample}.bam"
    output:
        BGP = "output/{sample}/{sample}_plius.bedgraph",
        BGM = "output/{sample}/{sample}_minus.bedgraph"
    threads: 1
    shell:
        """
        bedtools genomecov -ibam {input.BAM} -bg -pc -strand +  > {output.BGP}
        bedtools genomecov -ibam {input.BAM} -bg -pc -strand -  > {output.BGM}
        """